
interface Observer {
	void run();
}

class Start implements Observer {
	private Classifier c;
	public Start(Classifier c);
	public void run();
}

class Pause implements Observer {
	private Classifier c;
	public Pause(Classifier c);
	public void run();
}

class Resume implements Observer {
	private Classifier c;
	public Resume(Classifier c);
	public void run();
}

class Cancel implements Observer {
	private Classifier c;
	public Cancel(Classifier c);
	public void run();
}

class Aggregate implements Observer {
	private ResultList r;
	public Aggregate(ResultList r);
	public void run();
}

class AddImage implements Observer {
	private ImageList i;
	public AddImage(ImageList i);
	public void run();
}

class DeleteImage implements Observer {
	private ImageList i;
	public DeleteImage(ImageList i);
	public void run();
}

class ResetImage implements Observer {
	private ImageList i;
	public ResetImage(ImageList i);
	public void run();
}

class LoadThumbnail implements Observer {
	private ThumbnailLoader tl;
	public LoadThumbnail(ThumbnailLoader tl);
	public void run();
}

class EnablePlatform implements Observer {
	private RessourceManager rm;
	public EnablePlatform(RessourceManager rm);
	public void run();
}

class DisablePlatform implements Observer {
	private RessourceManager rm;
	public EnablePlatform(RessourceManager rm);
	public void run();
}

class ChooseOperationMode implements Observer {
	private Scheduler s;
	public ChooseOperationMode(Scheduler s);
	public void run();
}

class GetProgress implements Observer {
	private Classifier s;
	public GetProgress(Classifier s);
	public void run();
}

class GetResult implements Observer {
	private ResultList r;
	public GetResult(ResultList r);
	public void run();
}







class ResultList {
	private HashMap<ImageId, Result> r;
	public void setResult(ImageId i, Result r);
	public Result getResult(ImageId i);
	public Result aggregate();
}

class Result {
	private ArrayList<ClassResult> r;
	public void addResult(ClassResult r);
	public void order();
	public void clear();
	public ClassResult getResult(int index);
	public void getLength();
}

class ClassResult {
	public String name;
	public float percentage;
}

class Scheduler {
	private Mode mode;
	public void setHighPerformanceMode();
	public void setLowPowerMode();
	public void setEnergyEfficiencyMode();
	public WorkUnit nextFpgaWorkUnit();
	public WorkUnit nextCpuWorkUnit();
	public WorkUnit nextFileWorkUnit();
}

interface Mode {
	WorkUnit nextFpgaWorkUnit();
	WorkUnit nextCpuWorkUnit();
	WorkUnit nextFileWorkUnit();
}

class HighPerformanceMode implements Mode {
	public WorkUnit nextFpgaWorkUnit();
	public WorkUnit nextCpuWorkUnit();
	public WorkUnit nextFileWorkUnit();
}

class LowPowerMode implements Mode {
	public WorkUnit nextFpgaWorkUnit();
	public WorkUnit nextCpuWorkUnit();
	public WorkUnit nextFileWorkUnit();
}

class EnergyEfficiencyMode implements Mode {
	public WorkUnit nextFpgaWorkUnit();
	public WorkUnit nextCpuWorkUnit();
	public WorkUnit nextFileWorkUnit();
}

class Classifier {
}

interface WorkUnit {
	public void run();
}

class LoadFileWorkUnit implements WorkUnit {
	public void run();
}

class CpuConvolutionWorkUnit implements WorkUnit {
	public void run();
}

class FpgaConvolutionWorkUnit implements WorkUnit {
	public void run();
}

class MaxPoolingLayerWorkUnit implements WorkUnit {
	public void run();
}

class MeanPoolingLayerWorkUnit implements WorkUnit {
	public void run();
}

class FullyConnectedLayerWorkUnit implements WorkUnit {
	public void run();
}

class SoftMaxWorkUnit implements WorkUnit {
	public void run();
}

interface ActivationFunction {
	float calculate(float f);
}

class ReluActivationFunction implements ActivationFunction {
	public float calculate(float f);
}

class SigmoidActivationFunction implements ActivationFunction {
	public float calculate(float f);
}

class TanhActivationFunction implements ActivationFunction {
	public float calculate(float f);
}



class ResourceManager {
	private int imageCount;
	public void takeImageContainer();
	public void putImageContainer();
}

class ThumbnailLoader {
	private Thread t;
	public void startLoad();
	public Thumbnail getThumbNail();
}

class Thumbnail {
	private Image i;
	public Image getImage();
}

class ImageList {
	private ArrayList<Path> p;
	public void add(Path p);
	public void deleteImage(int i);
	public void reset();
}

